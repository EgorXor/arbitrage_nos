admin@bithub-bot:~/Bot/app$ cat db_query.py
import db_models
from helper import insert_time
import text_file
from datetime import datetime, timedelta


class QueryDb:

    @classmethod
    def save_user_state(cls, uid, f_name, state, prev):
        try:
            user = db_models.Users.create(uid=uid, f_name=f_name, state=state, prev=prev)
            db_models.Profit.create(uid=uid)
        except Exception:
            db_models.db.rollback()
            user = db_models.Users.get(db_models.Users.uid == uid)
            user.state = state
            user.prev = prev
            user.save()
        return user

    @classmethod
    def get_user(cls, uid):
        try:
            user = db_models.Users.get(db_models.Users.uid == uid)
        except db_models.Users.DoesNotExist:
            return None
        return user

    @classmethod
    def save_sub(cls, user, days=None):
        sub = user.sub
        if sub:
            sub[0].date = insert_time(sub, days)
            sub[0].group = '?? Новичок'
            sub[0].save()
            return sub[0]
        return db_models.Subscribers.create(uid=user.uid, group=user.prev, date=insert_time(sub, days))

    @classmethod
    def save_admin_sub(cls, number, group, days):
        try:
            sub = db_models.Subscribers.select().where(db_models.Subscribers.id == number)
        except ValueError:
            return None
        else:
            if sub:
                sub[0].id = number
                if sub[0].group != text_file.group.get(group):
                    sub[0].group = text_file.group.get(group)
                    if days:
                        sub[0].date = datetime.now() + timedelta(days=days)
                    else:
                        sub[0].date = None
                        sub[0].perm = True
                else:
                    sub[0].group = text_file.group.get(group)
                    if days:
                        sub[0].date = insert_time(sub, days)
                    else:
                        sub[0].date = None
                        sub[0].perm = True
                sub[0].save()
                return sub[0]
            return None

    @classmethod
    def check_ref(cls, uid):
        return db_models.Referrals.select().where(db_models.Referrals.uid == uid)

    @classmethod
    def add_money(cls, ref, money):
        try:
            user = db_models.Profit.get(db_models.Profit.uid == ref)
        except db_models.Profit.DoesNotExist:
            return None
        else:
            user.count += money
            user.save()
            return user

    @classmethod
    def get_money(cls, uid, money):
        user = cls.get_user(uid)
        profit = user.profit
        if profit:
            if profit[0].count < 0.01 or (profit[0].count - money) < 0:
                return None
            profit[0].count -= money
            profit[0].save()
            return profit[0]
        return None

    @staticmethod
    def _check_user(uid):
        user = db_models.Users.select().where(db_models.Users.uid == uid)
        if user:
            return True
        return False

    @classmethod
    def add_referral(cls, user, referral):
        if cls._check_user(user.chat.id):
            return False
        cls.save_user_state(user.chat.id, user.chat.first_name, user.text, None)
        db_models.Referrals.create(referral=int(referral), uid=user.chat.id)
        return True

    @classmethod
    def permissions(cls, uid, delete=False):
        user = cls.get_user(uid)
        if user is not None:
            if delete:
                user.admin = False
            else:
                user.admin = True
            user.save()
            return True
        return False

    @classmethod
    def get_all_admins(cls):
        return db_models.Users.select().where(db_models.Users.admin == True)

    @classmethod
    def save_wiki(cls, name, link, description):
        try:
            db_models.Wiki.create(name=name, link=link, description=description)
        except Exception:
            return False
        return True

    @classmethod
    def get_wiki(cls):
        return db_models.Wiki.select()

    @classmethod
    def delete_wiki(cls, name):
        return db_models.Wiki.delete().where(db_models.Wiki.name == name).execute()

    @classmethod
    def mass_update(cls, group, days):
        if group:
            update = db_models.Subscribers.update(date=db_models.Subscribers.date + timedelta(days=days)).where(
                (db_models.Subscribers.date != None) & (db_models.Subscribers.group << text_file.groups.get(group))
            )
            return update.execute()

        update = db_models.Subscribers.update(date=db_models.Subscribers.date + timedelta(days=days)).where(
                (db_models.Subscribers.date != None) & (db_models.Subscribers.group == '?? Новичок')
        )
        return update.execute()

    @classmethod
    def statistics(cls):
        total = db_models.Users.select().count()
        noobs = db_models.Subscribers.select().where(db_models.Subscribers.group == '?? Новичок').count()
        traders = db_models.Subscribers.select().where(
            (db_models.Subscribers.group == '?? Трейдер') & ((db_models.Subscribers.date.is_null(False)) |
                                                             (db_models.Subscribers.perm == True))).count()
        vips = db_models.Subscribers.select().where(
            (db_models.Subscribers.group == '?? VIP') & ((db_models.Subscribers.date.is_null(False)) |
                                                             (db_models.Subscribers.perm == True))).count()
        platinums = db_models.Subscribers.select().where(
            (db_models.Subscribers.group == '?? Platinum') & ((db_models.Subscribers.date.is_null(False)) |
                                                             (db_models.Subscribers.perm == True))).count()
        diamonds = db_models.Subscribers.select().where(
            (db_models.Subscribers.group == '?? Diamond')& ((db_models.Subscribers.date.is_null(False)) |
                                                             (db_models.Subscribers.perm == True))).count()
        current_w = datetime.now() - timedelta(days=7)
        current_m = datetime.now() - timedelta(days=31)
        week = db_models.Users.select().where(db_models.Users.date_reg > current_w).count()
        month = db_models.Users.select().where(db_models.Users.date_reg > current_m).count()

        referrals = {ref.referral.uid for ref in db_models.Referrals.select()}

        return total, noobs, traders, vips, platinums, diamonds, week, month, len(referrals)

    @classmethod
    def get_users_id(cls, photo=False):
        if photo:
            return [user.uid.uid for user in db_models.Subscribers.select().where(
                db_models.Subscribers.group << ['?? VIP', '?? Platinum', '?? Diamond'])]
        count = db_models.Culc.get(db_models.Culc.id == 1)
        group = []
        if count.count in [1,4]:
            group.append('?? Новичок')
        if count.count in [1,3,5]:
            group.append('?? Трейдер')
        if count.count == 6:
            count.count = 1
            count.save()
        else:
            count.count += 1
            count.save()

        group += ['?? VIP', '?? Platinum', '?? Diamond']

        users = [user.uid.uid for user in db_models.Subscribers.select().where(db_models.Subscribers.group << group)]

        return users
admin@bithub-bot:~/Bot/app$